package controller

import controller.GameEvent.GameEvent

/** Events generated in the application, more specifically by the user.
 * Those events are then handled by an Observer represented by the application
 * Controller class.
 *
 * There are 2 main types of events: menu events, generated by menu screens
 * (such as start game) and game events generated by the player which correlate
 * to an action of the hero entity.
 */
object GameEvent extends Enumeration {
  type GameEvent = Value

  val StartGame, ReturnToMenu, CloseApplication, SetMap,
      Up, UpReleased, MoveRight, MoveLeft, Slide, Down, DownReleased,
      Interaction, Attack, BowAttack = Value
}

/** Observer pattern trait. An observable entity sends game events to Observer
 * classes which handle them.
 *
 * @see [[controller.GameEvent]]
 */
trait Observer {

  /** Notifies the observer with the given event.
   *
   * @see [[controller.GameEvent]]
   *
   * @param event the event generated from an observable entity
   */
  def handleEvent(event: GameEvent): Unit

}

/** Utility trait which handles a collection of Observer entities on health of
 * a observable entity.
 *
 * @see [[controller.Observer]]
 */
trait ObserverManager {

  /** Add a single Observer object to the collection of entities looking for
   * events generated by an observable entity.
   *
   * @see [[controller.Observer]]
   *
   * @param observer the observer object to be added
   */
  def addObserver(observer: Observer): Unit

  /** Remove a specific Observer object from the collection of entities looking
   * for event generated by an observable entity.
   *
   * @see [[controller.Observer]]
   *
   * @param observer the observer object to be removed
   */
  def removeObserver(observer: Observer): Unit

  /** Utility method which notifies game events to the subscribed observers.
   *
   * @see [[controller.Observer]]
   * @see [[controller.GameEvent]]
   *
   * @param event a GameEvent enumeration value
   */
  def notifyEvent(event: GameEvent): Unit
}

class ObserverManagerImpl extends ObserverManager {

  private var observers: List[Observer] = List.empty

  override def addObserver(observer: Observer): Unit = this.observers = observer :: this.observers

  override def removeObserver(observer: Observer): Unit = {
    this.observers = observers.filterNot((obs: Observer) => obs.equals(observer))
  }

  override def notifyEvent(event: GameEvent): Unit = for(obs <- observers) obs.handleEvent(event)
}
